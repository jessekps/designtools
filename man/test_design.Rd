% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/designs.R
\name{test_design}
\alias{test_design}
\alias{mst_design}
\title{Test design through LP}
\usage{
test_design(
  items,
  ...,
  objective = random_test(),
  pars = NULL,
  population_density = dnorm,
  friends = NULL
)

mst_design(
  items,
  routing_module,
  ...,
  routing_cutoff = NULL,
  objective = random_test(),
  nmod = ifelse(!is.null(routing_cutoff), length(routing_cutoff) + 1, 3),
  pars = NULL,
  population_density = dnorm,
  friends = NULL
)
}
\arguments{
\item{items}{data.frame with column item_id and any other columns used in the constraints or as 'friends'}

\item{...}{constraints on test content or psychometric properties, see details}

\item{objective}{function to optimize, see details}

\item{pars}{item parameters, either a data.frame or a fit object from dexter::fit_enorm, dexterMST::fit_enorm_MST}

\item{population_density}{density function, eg `dnorm` or `function(x) dnorm(x,mean=1,1)`}

\item{friends}{name of a column in items that specifies friend groups (e.g. a text_id for reading texts)}

\item{routing_module}{data.frame with column item_id, specifying the routing module}

\item{routing_cutoff}{vector of cutoff points (inclusive) on the routing module. If NULL, the point will be computed 
to get approximately equal sized groups in each path.}

\item{nmod}{numer of modules}
}
\value{
A tibble with the selected items.
}
\description{
Design a linear or two stage multi stage test based on a linear programming solver.
}
\examples{
library(dplyr)

set.seed(123)
pars = tibble(item_id=sprintf('item\%03i',1:300), item_score=1,beta=runif(300,-2,2))
items = tibble(item_id=sprintf('item\%03i',1:300), category = sample(c('A','B','C'),300,TRUE))

ds = test_design(items, 
                 item_count(category=='A') == 40,
                 item_count(category=='B') == 15,
                 item_count(category=='C') == 20,
                 difficulty_constraint(0.6, 0.7),
                 objective = maximize_information(theta=0),
                 pars=pars)

items2 = tibble(item_id = sprintf('item\%03i',1:300),
                 category = sample(c('A','B','C'),300,TRUE),
                 text_id = sample(1:100,300,TRUE))

ds2 = test_design(items2, 
                  difficulty_constraint(0.6, 0.8),
                  item_fraction(category=='A') >= 0.5,
                  item_fraction(category=='A') <= 0.55,
                  item_fraction(category=='B') >= 0.15,
                  item_fraction(category=='B') <= 0.20,
                  item_fraction(category=='C') >= 0.25,
                  item_fraction(category=='C') <= 0.30,
                  irt_constraint(theta=c(0,1), max_sem=0.5),
                  pars=pars,
                  friends='text_id')

ds2 \%>\% count(category) \%>\% mutate(p=n/sum(n))

}
