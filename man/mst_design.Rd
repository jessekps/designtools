% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mst_designs.R
\name{mst_design}
\alias{mst_design}
\title{Simple 2-stage MST test design through LP}
\usage{
mst_design(
  pars,
  routing_module,
  nmod = 3L,
  optimize = c("length", "information", "quality"),
  item_properties = NULL,
  population_density = dnorm,
  sem_constraint = NULL,
  path_mean_pvalue = NULL,
  module_mean_pvalue = NULL,
  information_points = 0,
  nit = NULL,
  friends = NULL,
  ...
)
}
\arguments{
\item{pars}{item parameters}

\item{routing_module}{data.frame with a column item_id giving the selection of items for the routing module}

\item{nmod}{number of modules in second stage}

\item{optimize}{minimal test length (optionally weighted), maximum information (on `information_points`),
or maximum sum of `items$item_quality`}

\item{item_properties}{data.frame with columns item_id, and one or more of
item_weight (for test length optimization, defaults to 1),
item_quality (for quality optimization),
other discrete properties (e.g. for test matrix constraints, item groupings)}

\item{population_density}{density function for the population, the default is standard normal. 
the function should accept a vector of theta and return a vector of densities. 
To use for example a normal distribtution with a different mean, specify `population density = function(x) dnorm(x, mean=1)`}

\item{sem_constraint}{list/data.frame with columns theta and sem, maximum allowed SEM on these points}

\item{path_mean_pvalue}{Either a vector of length two, minimum and maximum average expected pvalue, or a list of length \code{nmod} with minimum and maximum pvalue per path (including the touring module).}

\item{module_mean_pvalue}{Either a vector of length two, minimum and maximum average expected pvalue, or a list of length \code{nmod} with minimum and maximum pvalue per module in the second stage.}

\item{information_points}{only needed when `optimize = 'information'`, 
will optimize the mean information on these points}

\item{nit}{number of items, single integer or integer range}

\item{friends}{name of an id column in items that specifies friend groups (e.g. reading texts)}

\item{...}{content constraints, the argument names must refer to columns in item_properties, see details}
}
\value{
A list with elements design and routing
}
\description{
Determinse a design for the secondary modules and routing give a pretest an specifications.
}
\details{
Content constraints refer to columns in item_properties that must contain discrete values. For example suppose
that `item_properties` contains a column named `bloom_tax` which contains the values 'know', 'apply' and 'evaluate'.
You can add a constraint specifying exactly how many of each should be in the test, e.g. 
`bloom_tax = list(know=10, apply=15, evaluate=5)`. You may also specify ranges, e.g.
`bloom_tax = list(know=c(10,15), apply=15, evaluate=(5,10))`. Lastly, you can specify these as ratio's. In this case
only ranges are allowed. For example: `bloom_tax = list(know=c(.2,.3), apply=c(.5,.6), evaluate=c(.2,.3))`.
 
MST designs are currently limited to two stages. The first stage must be supplied by the user. Routing is
optimized for equal size groups for the second stage.
}
