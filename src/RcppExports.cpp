// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bdivide
List bdivide(const arma::imat& properties, const arma::ivec& bin_min, const arma::ivec& bin_max, const int nbins);
RcppExport SEXP _designtools_bdivide(SEXP propertiesSEXP, SEXP bin_minSEXP, SEXP bin_maxSEXP, SEXP nbinsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type properties(propertiesSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type bin_min(bin_minSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type bin_max(bin_maxSEXP);
    Rcpp::traits::input_parameter< const int >::type nbins(nbinsSEXP);
    rcpp_result_gen = Rcpp::wrap(bdivide(properties, bin_min, bin_max, nbins));
    return rcpp_result_gen;
END_RCPP
}
// perm_bdivide
arma::ivec perm_bdivide(const arma::imat& properties, const arma::ivec& bin_min, const arma::ivec& bin_max, const int nbins, const int max_iter, const double t_amp, const double t_center, const double t_width);
RcppExport SEXP _designtools_perm_bdivide(SEXP propertiesSEXP, SEXP bin_minSEXP, SEXP bin_maxSEXP, SEXP nbinsSEXP, SEXP max_iterSEXP, SEXP t_ampSEXP, SEXP t_centerSEXP, SEXP t_widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type properties(propertiesSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type bin_min(bin_minSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type bin_max(bin_maxSEXP);
    Rcpp::traits::input_parameter< const int >::type nbins(nbinsSEXP);
    Rcpp::traits::input_parameter< const int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type t_amp(t_ampSEXP);
    Rcpp::traits::input_parameter< const double >::type t_center(t_centerSEXP);
    Rcpp::traits::input_parameter< const double >::type t_width(t_widthSEXP);
    rcpp_result_gen = Rcpp::wrap(perm_bdivide(properties, bin_min, bin_max, nbins, max_iter, t_amp, t_center, t_width));
    return rcpp_result_gen;
END_RCPP
}
// perm_bdivide2
arma::ivec perm_bdivide2(const arma::ivec& n_nit, const arma::mat& properties, const arma::vec& bin_opt, const int nbins, const int max_iter, const double t_amp, const double t_center, const double t_width);
RcppExport SEXP _designtools_perm_bdivide2(SEXP n_nitSEXP, SEXP propertiesSEXP, SEXP bin_optSEXP, SEXP nbinsSEXP, SEXP max_iterSEXP, SEXP t_ampSEXP, SEXP t_centerSEXP, SEXP t_widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type n_nit(n_nitSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type properties(propertiesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type bin_opt(bin_optSEXP);
    Rcpp::traits::input_parameter< const int >::type nbins(nbinsSEXP);
    Rcpp::traits::input_parameter< const int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type t_amp(t_ampSEXP);
    Rcpp::traits::input_parameter< const double >::type t_center(t_centerSEXP);
    Rcpp::traits::input_parameter< const double >::type t_width(t_widthSEXP);
    rcpp_result_gen = Rcpp::wrap(perm_bdivide2(n_nit, properties, bin_opt, nbins, max_iter, t_amp, t_center, t_width));
    return rcpp_result_gen;
END_RCPP
}
// bdivide2
List bdivide2(const arma::ivec& nit, const arma::mat& properties, const arma::vec& bin_opt, const int nbins);
RcppExport SEXP _designtools_bdivide2(SEXP nitSEXP, SEXP propertiesSEXP, SEXP bin_optSEXP, SEXP nbinsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type nit(nitSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type properties(propertiesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type bin_opt(bin_optSEXP);
    Rcpp::traits::input_parameter< const int >::type nbins(nbinsSEXP);
    rcpp_result_gen = Rcpp::wrap(bdivide2(nit, properties, bin_opt, nbins));
    return rcpp_result_gen;
END_RCPP
}
// kmk_partition
DataFrame kmk_partition(const std::vector<int>& nrs, const int k);
RcppExport SEXP _designtools_kmk_partition(SEXP nrsSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type nrs(nrsSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kmk_partition(nrs, k));
    return rcpp_result_gen;
END_RCPP
}
// tsp_complete
List tsp_complete(const arma::imat& m);
RcppExport SEXP _designtools_tsp_complete(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(tsp_complete(m));
    return rcpp_result_gen;
END_RCPP
}
// tsp_complete2
List tsp_complete2(const arma::imat& m);
RcppExport SEXP _designtools_tsp_complete2(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(tsp_complete2(m));
    return rcpp_result_gen;
END_RCPP
}
// tsp_sa
List tsp_sa(const arma::imat& m, const int max_iter, const double t_amp, const double t_center, const double t_width);
RcppExport SEXP _designtools_tsp_sa(SEXP mSEXP, SEXP max_iterSEXP, SEXP t_ampSEXP, SEXP t_centerSEXP, SEXP t_widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type t_amp(t_ampSEXP);
    Rcpp::traits::input_parameter< const double >::type t_center(t_centerSEXP);
    Rcpp::traits::input_parameter< const double >::type t_width(t_widthSEXP);
    rcpp_result_gen = Rcpp::wrap(tsp_sa(m, max_iter, t_amp, t_center, t_width));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_designtools_bdivide", (DL_FUNC) &_designtools_bdivide, 4},
    {"_designtools_perm_bdivide", (DL_FUNC) &_designtools_perm_bdivide, 8},
    {"_designtools_perm_bdivide2", (DL_FUNC) &_designtools_perm_bdivide2, 8},
    {"_designtools_bdivide2", (DL_FUNC) &_designtools_bdivide2, 4},
    {"_designtools_kmk_partition", (DL_FUNC) &_designtools_kmk_partition, 2},
    {"_designtools_tsp_complete", (DL_FUNC) &_designtools_tsp_complete, 1},
    {"_designtools_tsp_complete2", (DL_FUNC) &_designtools_tsp_complete2, 1},
    {"_designtools_tsp_sa", (DL_FUNC) &_designtools_tsp_sa, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_designtools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
